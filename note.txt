incapsulation - не важно как реализована логика сервиса или как бд отбрабатывает, у нас есть интерфейсы
этого достаточно, а как внутри бех разницы

Srp - 1 func/method - to do 1 function(validate, prepareApp, sort, etc)

//Open/closed?
//type Home struct {window, door, nameRoom} -> TurnHeat(); TurnLight(),
//type HomeSmarter interface {TurnLight(), TurnHeat(), TurnCondicioner() }

//type Kitchen struct{wallpaper} TurnLight(); !change parent method; but override
//type BathRoom struct -> TurnHeat(){override own logic}; !change parent method; but override

//for App - type StorageConnecter  interface{
//Mongo
//Psql
//etc
//}


Pattern fabric - XStruct{}; XInterface; YStruct -> каждая стурутра по своему реализовывает
like polymorphism


clousers - func() func() int {
    i := 10
    retun func()int{
        i++
        return i
    }
}

p := 10
v := &p

f(v)

func test(n *int) {
    *n = 100//write new value v, p variable, pointer
}

// - Го не юзает препроцессинг - код - сразу летит компилятору без проверки кода
go run, go build - temp file
Стандартные потоки вводы вывводы ошибок - os.Stdout, os.Stdin, os.Stderr - dev/stdout... файлы в юникс, можно туда зписывать данные и читать из них
log.New()- cusom log, pathFile, log.StdOutput(); sysLog - sytem log write
level logs, info, error, warn, type Logs;

Го - самодостаточный - в нем ужет есть http server; file server; работа с сетью
с многопоточностью, чс базой данных и прочие пакеты

Компиляциия - go tool compile file.go
обьектный файл - машинный код

Сборка мусора (Garbage Collection, GC) — это процесс освобождения места в памя-
ти, которое больше не используется.
трехцветный алгоритм
пометки и очистки. Он может работать конкурентно, одновременно с программой,
и использует барьер записи.

Приложение, работающее во время выполнения сборки мусора, называется
мутатором

mongoConfig

// Config object
type Config struct {
	Env     string        `env:"ENV"`
	MongoDB MongoDBConfig `json:"mongodb"`
	Host    string        `env:"APP_HOST"`
	Port    string        `env:"APP_PORT"`
}

func GetConfig() Config {
	return Config{
		Env:     os.Getenv("ENV"),
		MongoDB: GetMongoDBConfig(),
		Host:    os.Getenv("APP_HOST"),
		Port:    os.Getenv("APP_PORT"),
	}
}

//composite configs


//realize - gallery
crud - Machine
GetFilter
GetSearch
GetList
GetByID


- gallery - send - all data - > listCategory,  listModel, listAge, etc
- profile - createNewCar - listCategory, listModel, etc
//sort by asc, desc date; price min-max, category, etc
//fileserver - multi photo - for save phot local
TechSpec list

filter - 1 field || 1 query - complex filter

-------------------------------

testdb=# insert into bazar_body_type(name) values('купе');
testdb=# insert into bazar_brand(name) values('Tesla');
testdb=# insert into bazar_category(name) values('легковые');
testdb=# insert into bazar_city(name) values('Шарджа');
testdb=# insert into bazar_country(name, city_id) values('ОАЭ',1);
testdb=# insert into bazar_color(name) values('white');
testdb=# insert into bazar_drive_unit(name) values('задний приводный');
testdb=# insert into bazar_fuel(name) values('эелектричество');
testdb=# insert into bazar_model(name) values('Model S3');
testdb=# insert into bazar_state(name) values('Новый');
testdb=# insert into bazar_trans(name) values('Автомат');
insert into bazar_roles(name) values('saler');
insert into bazar_currency(name) values('usd');


  insert into bazar_user(email, password, phone, username, first_name, last_name, created_at, role_id, country_id) values('devstackq@mail.kz', 'password', 87471370784, 'devstackq', 'Bekzh', 'Satarkul', '2022-04-12 04:05:06', 1,1);


{
    "vin": "qa287398uie743w9ds9a",
    "description": "2015 Porsche 911 Carrera S, 3.8 F6 4WD, 400bhp, with 7-Speed Auto Gearbox. AED 249,000/- or AED 6115 / Month with 20% Down payment for Years Full Porsche Service History Mile",
    "year": 2015,
    "price": 249.459,
    "relation" : {
    "category_id" : 1,
    "year_id": 1,
    "model_id": 1,
    "brand_id": 1,
    "state_car_id": 1,
    "user_id": 1,
    "country_id": 1,
    "city_id": 1,
    "fuel_type_id" : 1,
    "drive_unit_id": 1,
    "trans_type_id": 1,
    "body_type_id" : 1,
    "color_id" : 1
    },
    "tech_spec" : {
        "odometer" : 1293.9,
        "horse_power" : 234
    }
}


TODO:

1 Middleware - auth user
Auth - signin - token return

2 Profile - middlew -> GetUserService(data), GetGallery(GetMyAddedMachine, )

3 FILE SERVER - photo

sort By Price -> date, asc/desc Client

Функицонал: авторизация(по токену), фильтрация(по параметрам), профайлЮзера(машины автора), галерея, машинаПоАйди, создатьМашинку
Карусель фотографий
Сортировка


refactor - filter; model; brand; machine  - crud  + 


todo:
GetListCityByCountryId - todo; fix
Pagination - 
